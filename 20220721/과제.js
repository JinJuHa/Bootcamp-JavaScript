
//3-2차

var feel = "행복한";
var face = {
    feel: "슬픈",
    showFace: showFaceFn
}

function showFaceFn() {
    console.log(`왜 그런 ${this.feel} 얼굴을 하고 계신가요.`);
}

face.showFace(); // 1. 결과를 예상하고 결과에 대한 이유를 설명하세요
/*
결과: 왜 그런 슬픈 얼굴을 하고 계신가요.
이유: face.showFace();가 작동이 될 때, 변수인 face 에는 객체인 {feel:"슬픈"}이 있고, showFace는 showFacFn와 같기 때문에 하단에 showFaceFn란 이름을 가진 함수에 "슬픔"이라는 프로퍼티 값이 들어가서 '왜 그런 슬픈 얼굴을 하고 계신가요' 라는 값이 콘솔에 출력된다.
*/

showFaceFn(); // 2. 결과를 예상하고 결과에 대한 이유를 설명하시세요
/*
결과: 왜 그런 행복한 얼굴을 하고 계신가요.
이유: var feel은 var face내부에 있는 feel이라는 이름의 프로퍼티 키와 이름은 같으나 별개인 변수이기 때문에
showFaceFn();이 작동될 때 바로 showFaceFn란 이름을 가진 함수에 원래 할당된 값이 들어가서
'왜 그런 행복한 얼굴을 하고 계신가요'라는 값이 콘솔에 출력된다.
*/




//3-3차
// 1~9의 결과값과 그 이유를 작성해주세요
// 에러가 발생한다면 에러이유를 작성하고 주석을 작성하여 하위 결과 확인

var a = 10;

function scope() {
    var a = 20;
    console.log("a : ", a);  // 1. a : 20 //같은 지역 스코프 안에 있기 때문에 a는 20이 나온다.

    if (true) {
        console.log("a : ", a); // 2. a : 20 //같은 지역 스코프 안에 a값이 20으로 할당 되어 있고, 바로 아래에 a이 새로 할당되기 이전에 console.log로 출력하기 때문에 값이 20으로 나온다.
        var a = 50;
        console.log("a : ", a); // 3. a : 50 // 값이 50으로 새로 할당 되었기 때문에 값이 50으로 출력된다.
    }

    var f1 = inner();

    function inner() {
        var a = 30;
        var b = 5;
        console.log("a : ", a); // 4. a : 30 // 값이 30으로 새로 할당 되었기 때문에 30으로 출력이 된다.
        console.log("b : ", b); // 5. b : 5 // b의 값을 5로 할당했기 때문에 5가 출력된다.
    }
    console.log("a : ",a); // 6. a : 50
    //console.log("a : ",b); // 7. 스코프의 특징인 매개변수를 참조할 수 있는 유효범위가 큰 지역 스코프에서 낮은 지역 스코프로 향할 수 없기 때문에 더 안쪽에 있는 inner지역 스코프인 b값을 정의하지 못하여 에러가 발생한다.
}

scope();
console.log("a : ",a); // 8. a : 10 //전역 스코프 안에 a값이 10으로 할당 되었기 때문에 10으로 출력된다.
console.log("a : ",b); // 9. 위 설명과 마찬가지로 참조할 수 있는 유효범위가 전역에서 지역으로 향할 수 없기 때문에 값이 출력되지 않고 에러가 발생한다.